---

- name: Test distribution
  assert:
    that: >
      ansible_os_family == "RedHat"

- name: Create YUM repo file
  yum_repository:
    name: jenkins
    description: Jenkins YUM repo
    baseurl: "{{ jenkins_master_yumrepo_url }}"
    gpgkey: "{{ jenkins_master_yumrepo_key_url }}"
    gpgcheck: yes
  args: "{{ jenkins_master_yumrepo_params }}"
  tags:
    - jenkins_master_pkg

- name: Install Jenkins packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ jenkins_master_pkgs }}"
  notify:
    - Restart Jenkins service
  tags:
    - jenkins_master_pkg

- name: Configure Jenkins service
  template:
    src: jenkins.j2
    dest: /etc/sysconfig/jenkins
  notify:
    - Restart Jenkins service
  tags:
    - jenkins_master_config

- name: Create custom Groovy init.d directory
  file:
    path: "{{ jenkins_master_config_jenkins_home }}/init.groovy.d"
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0755
  tags:
    - jenkins_master_config
    - jenkins_master_config_groovy

- name: Deploy Groovy script with basic setup
  template:
    src: setup.groovy.j2
    dest: "{{ jenkins_master_config_jenkins_home }}/init.groovy.d/setup.groovy"
    owner: jenkins
    group: jenkins
    mode: 0640
  notify:
    - Restart Jenkins service
  tags:
    - jenkins_master_config
    - jenkins_master_config_groovy

- name: Apply MD5 workaround
  lineinfile:
    dest: "{{ jenkins_master_java_security_file }}"
    regexp: ^(jdk.certpath.disabledAlgorithms=MD2, )MD5, (RSA keySize < 1024)
    line: '\1\2'
    backrefs: yes
    backup: yes
  notify:
    - Restart Jenkins service
  when: jenkins_master_md5_workaround

- name: Make sure the Jenkins services is enabled
  service:
    name: "{{ jenkins_master_service }}"
    enabled: yes
  tags:
    - jenkins_master_service

- name: Make sure the Jenkins services is running
  service:
    name: "{{ jenkins_master_service }}"
    state: started
  register: jenkins_master_service_started
  tags:
    - jenkins_master_service

- include: wait.yaml
  when: >
    jenkins_master_service_started is defined and
    jenkins_master_service_started.changed
  tags:
    - jenkins_master_service

- name: Install plugins without a specific version
  jenkins_plugin:
    name: "{{ item.key }}"
  args: "{{ jenkins_master_plugins_params }}"
  register: jenkins_master_plugin_unversioned
  when: >
    item.value == None or
    'version' not in item.value
  with_dict: "{{ jenkins_master_plugins }}"
  tags:
    - jenkins_master_plugins

- name: Install plugins with a specific version
  jenkins_plugin:
    name: "{{ item.key }}"
    version: "{{ item.value['version'] }}"
  args: "{{ jenkins_master_plugins_params }}"
  register: jenkins_master_plugin_versioned
  when: >
    item.value != None and
    'version' in item.value
  with_dict: "{{ jenkins_master_plugins }}"
  tags:
    - jenkins_master_plugins

- name: Initiate the fact
  set_fact:
    jenkins_restart_required: no
  tags:
    - jenkins_master_plugins

- name: Check if restart is required by any of the versioned plugins
  set_fact:
    jenkins_restart_required: yes
  when: item.changed
  with_items: "{{ jenkins_master_plugin_versioned.results }}"
  tags:
    - jenkins_master_plugins

- name: Check if restart is required by any of the unversioned plugins
  set_fact:
    jenkins_restart_required: yes
  when: item.changed
  with_items: "{{ jenkins_master_plugin_unversioned.results }}"
  tags:
    - jenkins_master_plugins

- name: Restart Jenkins if required
  service:
    name: jenkins
    state: restarted
  when: jenkins_restart_required
  tags:
    - jenkins_master_plugins

- include: wait.yaml
  when: jenkins_restart_required
  tags:
    - jenkins_master_plugins

- name: Reset the fact
  set_fact:
    jenkins_restart_required: no
  when: jenkins_restart_required
  tags:
    - jenkins_master_plugins

- name: Plugin pinning
  jenkins_plugin:
    name: "{{ item.key }}"
    state: "{{ 'pinned' if item.value['pinned'] else 'unpinned'}}"
  args: "{{ jenkins_master_plugins_params }}"
  when: >
    item.value != None and
    'pinned' in item.value
  with_dict: "{{ jenkins_master_plugins }}"
  tags:
    - jenkins_master_plugins

- name: Plugin enabling
  jenkins_plugin:
    name: "{{ item.key }}"
    state: "{{ 'enabled' if item.value['enabled'] else 'disabled'}}"
  args: "{{ jenkins_master_plugins_params }}"
  when: >
    item.value != None and
    'enabled' in item.value
  with_dict: "{{ jenkins_master_plugins }}"
  tags:
    - jenkins_master_plugins
